#!/bin/bash


function Required_Packages() {
  echo "Check dependencies ..... " >> "$baseDIR"/instance_backup_events.log
  [[ -z "$(apt list jq 2>/dev/null | grep "installed")" ]] && echo "installing jq package .... "; apt update -y -q >> /dev/null 2>&1 ;apt install jq -y -q >> /dev/null 2>&1
}

function Activate_env() {
  local vPath=$1
  echo "Environment $vPath loaded successfully"
  source "$vPath/bin/activate"
  echo "$vPath activated"
  #alias openstack="$vPath/bin/openstack"
  unset vPath
}

function Openstack_authentication() {
  #Auth_to_openstack
  export OS_AUTH_URL=$1
  export OS_USERNAME=$2
  export OS_PASSWORD=$3
  export OS_PROJECT_ID=$4
  export OS_USER_DOMAIN_NAME=$5
  export OS_REGION_NAME=$6
  export OS_INTERFACE=public
  export OS_IDENTITY_API_VERSION=3
}

function Waiting_for_ending_backup() {
    local backupID=$1
    local maxTry=$2
    local timeout=$3
    local baseDIR=$4
    local counter=1
    while [ $counter -le "$maxTry" ] ; do
      echo "waiting for $backupID to finish" | tee -a "$baseDIR"/instance_backup_events.log
      local backupStatus=$(openstack volume backup show  "$backupID" -c status -f value |sed 's/"//g' | sed 's/ //g' | sed '/^$/d')
      echo "status of backup $backupID is $backupStatus" | tee -a "$baseDIR"/instance_backup_events.log
      if [ "$backupStatus" == "available" ] ; then
        echo "backup $backupID was finished" | tee -a "$baseDIR"/instance_backup_events.log
        break
      else
        counter=$(( "$counter" + 1 ))
        sleep "$timeout"
      fi
    done
    unset counter backupID maxTry timeout backupStatus baseDIR
}

function Volume_ready_for_backup() {
  local volumeID=$1
  local maxTry=$2
  local timeout=$3
  local counter=1
  ready=false
  while [ ! $ready ] && [ $counter -le "$maxTry" ] ; do
    local volumeStatus=$(openstack volume show "$volumeID" -c status -f value | sed 's/ //g' | sed 's/"//g')
    if [ "$volumeStatus" == "available" ] || [ "$volumeStatus" == "in-use" ] ; then
      ready=true
      break
    else
      counter=$(( "$counter" + 1 ))
      sleep "$timeout"
    fi
    unset volumeStatus
  done

  unset volumeID maxTry timeout counter
}

function Get_backup() {
  local backupType=$1
  if [ "$backupType" == "instance" ] ; then
    local plan="instance"
    local projectID=$2
    local projectName=$3
    local instanceName=$4
    local instanceID=$5
    local volumeID=$6
    local deviceMountPoint=$7
    local BackupDate=$8
    local baseDIR=$9
    local IP=$(openstack server show "$instanceID" -c addresses -f json | jq .addresses | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" | awk 'BEGIN { ORS = " " } { print }')
    echo "getting backup from $instanceName in The project $projectName volume : $volumeID as $deviceMountPoint .... " >> "$baseDIR"/instance_backup_events.log
    echo "Running command : openstack --os-project-id $projectID volume backup create --force --name $instanceName-$BackupDate-$deviceMountPoint --description (H.E.IPs:$IP , InstanceID:$instanceID , VolumeID:$volumeID) $volumeID" | tee -a "$baseDIR"/instance_backup_events.log
    backupID=$(openstack --os-project-id "$projectID"  volume backup create --force --name "$instanceName-$BackupDate-$deviceMountPoint" --description "H.E.IPs:$IP , InstanceID:$instanceID , VolumeID:$volumeID" "$volumeID" -f json | jq ".id" | sed 's/\"//g')
    unset instanceName deviceMountPoint IP
  elif [ "$backupType" == "project_mounted_volume" ]; then
    local plan="project"
    local projectID=$2
    local projectName=$3
    local instanceName=$4
    local instanceID=$5
    local volumeID=$6
    local deviceMountPoint=$7
    local BackupDate=$8
    local baseDIR=$9
    echo "openstack server show $instanceID -c addresses -f json | jq .addresses | grep -oE \"\b([0-9]{1,3}\.){3}[0-9]{1,3}\b\" | awk 'BEGIN { ORS = \" \" } { print }"
    local IP=$(openstack server show "$instanceID" -c addresses -f json | jq .addresses | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" | awk 'BEGIN { ORS = " " } { print }')
    echo "Getting backup from $volumeID in The project $projectName that attached to $instanceName as $deviceMountPoint ...." >> "$baseDIR"/instance_backup_events.log
    echo "openstack --os-project-id $projectID  volume backup create --force --name $instanceName-$BackupDate-$deviceMountPoint --description (H.E.IPs:$IP , InstanceID:$instanceID , VolumeID:$volumeID) $volumeID" | tee -a "$baseDIR"/instance_backup_events.log
    backupID=$(openstack --os-project-id "$projectID" volume backup create --force --name "$instanceName-$BackupDate-$deviceMountPoint" --description "H.E.IPs:$IP , InstanceID:$instanceID , VolumeID:$volumeID" "$volumeID" -f json | jq ".id" | sed 's/\"//g')
    unset instanceName deviceMountPoint IP instanceID
  elif [ "$backupType" == "project_unmounted_volume" ]; then
    local plan="project"
    local projectID=$2
    local projectName=$3
    local volumeID=$4
    local volumeName=$5
    local BackupDate=$6
    local baseDIR=$7
    echo "Getting backup from $volumeName with ID $volumeID in Th project $projectName ...." >> "$baseDIR"/instance_backup_events.log
    echo "openstack --os-project-id $projectID  volume backup create --name $volumeName-$BackupDate --description H.E.no attachment to any instance $volumeID" | tee -a "$baseDIR"/instance_backup_events.log
    backupID=$(openstack --os-project-id "$projectID" --os-project-name "$projectName" volume backup create --name "$volumeName-$BackupDate" --description "H.E.no attachment to any instance" "$volumeID" -f json | jq ".id" | sed 's/\"//g')
    unset volumeName
  fi
  if [ -n "$backupID" ] ; then
    Waiting_for_ending_backup "$backupID" 10 60 "$baseDIR"
    local backup=$(openstack volume backup show "$backupID" -f json)
    echo "backup specifications are : " "$backup" | tee -a "$baseDIR"/instance_backup_events.log
    local volumeID=$(echo "$backup" | jq '.volume_id' | sed 's/"//g')
    local createTime=$(echo "$backup" | jq '.created_at' | sed 's/"//g' |awk -F "." '{print $1}')
    if [ "$plan" == "instance" ] ; then
      echo "$projectID $backupID $volumeID $createTime $plan $instanceID" | sed 's/"//g'>> "$baseDIR"/backupsList
    elif [ "$plan" == "project" ]; then
      echo "$projectID $backupID $volumeID $createTime $plan" | sed 's/"//g'>> "$baseDIR"/backupsList
    fi
    unset volumeID createTime backup
  fi
  unset backupType projectID projectName volumeID BackupDate baseDIR instanceID
}


function Retention_Calc(){
  local plan=$1
  local baseDIR=$2
  local workDIR=$3
  local volumeID=$4
  local retention=$5
  if [ "$plan" == "instance" ] ; then
    if [ -f  "$baseDIR"/backupsList ] ; then
      if [ "$retention" -gt 0 ] ; then
        cat < "$baseDIR"/backupsList | grep "$volumeID" | grep "$plan" | sort -r -k 4 > "$workDIR"/backupsTemp_"$plan"_"$instanceFileName" && mv "$workDIR"/backupsTemp_"$plan"_"$instanceFileName" "$workDIR"/backups_"$plan"_"$instanceFileName"
        if [  "$retention" -gt 1 ] ; then
          sed -i "1,""$retention""d" "$workDIR"/backups_"$plan"_"$instanceFileName"
        else
          sed -i "1d" "$workDIR"/backups_"$plan"_"$instanceFileName"
        fi
      else
        cat < "$baseDIR"/backupsList | grep "$volumeID" | grep "$plan" > "$workDIR"/backupsTemp_"$plan"_"$instanceFileName" && mv "$workDIR"/backupsTemp_"$plan"_"$instanceFileName" "$workDIR"/backups_"$plan"_"$instanceFileName"
      fi
    fi
    echo "####################################################################"
    cat "$workDIR"/backups_"$plan"_"$instanceFileName"
  elif [ "$plan" == "project" ]; then
    if [ -f  "$baseDIR"/backupsList ] ; then
      if [ "$retention" -gt 0 ] ; then
        cat < "$baseDIR"/backupsList | grep "$volumeID" | grep "$plan" | sort -r -k 4 > "$workDIR"/backupsTemp_"$plan"_"$projectFileName" && mv "$workDIR"/backupsTemp_"$plan"_"$projectFileName" "$workDIR"/backups_"$plan"_"$projectFileName"
        if [  "$retention" -gt 1 ] ; then
          sed -i "1,""$retention""d" "$workDIR"/backups_"$plan"_"$projectFileName"
        else
          sed -i "1d" "$workDIR"/backups_"$plan"_"$projectFileName"
        fi
      else
        cat < "$baseDIR"/backupsList | grep "$volumeID" | grep "$plan" > "$workDIR"/backupsTemp_"$plan"_"$projectFileName" && mv "$workDIR"/backupsTemp_"$plan"_"$projectFileName" "$workDIR"/backups_"$plan"_"$projectFileName"
      fi
    fi
    cat "$workDIR"/backups_"$plan"_"$projectFileName"
  fi
  unset plan volumeID baseDIR workDIR retention
}

function Delete_Volume_Backups() {
  local plan=$1
  local projectID=$2
  local baseDIR=$3
  local workDIR=$4
  local volumeID=$5
  local retention=$6
  Retention_Calc "$plan" "$baseDIR" "$workDIR" "$volumeID" "$retention"
  if [ "$plan" == "instance" ] ; then
      while IFS="" read -r backup || [ "$backup" ] ; do
        local backupID=$(echo "$backup" | awk -F " " '{print $2}')
        echo "deleting $backupID ...... " >> "$baseDIR"/instance_backup_events.log
        echo "openstack --os-project-id $projectID volume backup delete $backupID" >> "$baseDIR"/instance_backup_events.log
        openstack --os-project-id "$projectID" volume backup delete "$backupID"
        sed -i "/$backupID/d" "$baseDIR"/backupsList
      done < "$workDIR"/backups_"$plan"_"$instanceFileName"
      rm "$workDIR"/backups_"$plan"_"$instanceFileName"
  elif [ "$plan" == "project" ]; then
      while IFS="" read -r backup || [ "$backup" ] ; do
        local backupID=$(echo "$backup" | awk -F " " '{print $2}')
        echo "deleting $backupID ...... " >> "$baseDIR"/instance_backup_events.log
        echo "openstack --os-project-id $projectID volume backup delete $backupID" >> "$baseDIR"/instance_backup_events.log
        openstack --os-project-id "$projectID" volume backup delete "$backupID"
        sed -i "/$backupID/d" "$baseDIR"/backupsList
      done < "$workDIR"/backups_"$plan"_"$projectFileName"
      rm "$workDIR"/backups_"$plan"_"$projectFileName"
  fi
  unset projectID baseDIR workDIR volumeID retention
}

function Delete_Backup() {
  local plan=$1 #instance or project
  local baseDIR=$2
  local workDIR=$3
  local projectID=$4
  local retention=$5
  if [ "$plan" == "instance" ] ; then
    cat < "$baseDIR"/backupsList | grep "$projectID" | grep "$plan" | grep -f "$instancesIdFilePath" | awk -F " " '{print $3}' | sort -u > "$workDIR"/VolumebackupsID_"$plan"_"$instanceFileName"
    cat "$workDIR"/VolumebackupsID_"$plan"_"$instanceFileName"
    while IFS="" read -r volumeID || [ "$volumeID" ] ; do
      Delete_Volume_Backups "$plan" "$projectID" "$baseDIR" "$workDIR" "$volumeID" "$retention"
    done < "$workDIR"/VolumebackupsID_"$plan"_"$instanceFileName"
    rm "$workDIR"/VolumebackupsID_"$plan"_"$instanceFileName"
  elif [ "$plan" == "project" ]; then
    cat < "$baseDIR"/backupsList | grep "$projectID" | grep "$plan" | awk -F " " '{print $3}' | sort -u > "$workDIR"/VolumebackupsID_"$plan"_"$projectFileName"
    cat "$workDIR"/VolumebackupsID_"$plan"_"$projectFileName"
    while IFS="" read -r volumeID || [ "$volumeID" ] ; do
      Delete_Volume_Backups "$plan" "$projectID" "$baseDIR" "$workDIR" "$volumeID" "$retention"
    done < "$workDIR"/VolumebackupsID_"$plan"_"$projectFileName"
    rm "$workDIR"/VolumebackupsID_"$plan"_"$projectFileName"
  fi
  unset baseDIR workDIR projectID retention plan
}

function Usage {
  echo "$1"
  echo "Usage: ./backup.sh [options]
  -h , --help                                       Show this Usage information
  -u , --username <username>                        Specify username that has admin role in specified project and domain (Required)
  -p , --password <password>                        Specify password that has admin role in specified project and domain (Required)
  -i , --project-id <projectID>                     Specify project ID in specified domain (Required)
  -d , --domain <domain>                            Specify domain that you wanna get backup from its desired volumes (Required)
  -r , --retention <number of backups>              Specify an Integer to mean number of retention backups
  -w , --workdir                                    Specify a work directory name that customer file defining to it (this directory will must created in script directory root) (Required)
  --delete                                          delete last backups base on retention backups automatically
  --instance <instance_file_path>                   Specify name of instances ID file (Required and select only --instance or --project )
  --project <project file path>                     Specify name of projects ID file (Required and select only --instance or --project )
  --virtenv <virtualenv directory path>             Specify path to virtualenv directory
  --auth-url <keystone authentication url>          Specify keystone authentication url
  --region <region name>                            Specify region name that openstack work on it"
  exit 1
}


#Get script DIR
baseDIR=$(dirname "$0")
#Delete flag is false by default
deleteFlag=false
#Number of retention is 0 by default
retention=0
#define parameters for run script
SHORT_OPTS="hu:p:d:i:r:w:"
LONG_OPTS="auth-url:,help,username:,password:,project-id:,domain:,region:,retention:,delete,workdir:,instance:,project:,virtenv:"
ARGS=$(getopt -o "${SHORT_OPTS}" -l "${LONG_OPTS}" -- "$@")  || { Usage >&2; exit 2; }
eval set -- "$ARGS"
while [ $# -gt 0 ]; do
  case $1 in
  --auth-url)
    AUTH_URL_ARG="$2"
    shift 2
    ;;
  --username|-u)
    USERNAME_ARG="$2"
    shift 2
    ;;
  --password|-p)
    PASSWORD_ARG="$2"
    shift 2
    ;;
  --project-id|-i)
    PROJECT_ID_ARG="$2"
    shift 2
    ;;
  --domain|-d)
    DOMAIN_ARG="$2"
    shift 2
    ;;
  --region)
    REGION_ARG="$2"
    shift 2
    ;;
  --retention|-r)
    retention="$2"
    shift 2
    ;;
  --delete)
    deleteFlag=true
    shift
    ;;
  --workdir|-w)
    [[ "$2" == "" || "$2" == null ]] && Usage "Specify path to work directory" >&2
    [[ ! -d "$baseDIR/$2" ]] && Usage "No such file or directory : $baseDIR/$2 ..." >&2
    workDIR="$baseDIR/$2"
    shift 2
    ;;
  --project)
    [[ -z "$workDIR" ]] && Usage "Specify --workdir argument .... " >&2
    [[ $optType == "instance" ]] && Usage "Specify only --project or --instance" >&2
    [[ "$2" == "" || "$2" == null ]] && Usage "Specify path to projects ID file" >&2
    [[ ! -f "$workDIR/$2" ]] && Usage "No such file or directory : $workDIR/$2 ..." >&2
    projectsIdFilePath="$workDIR/$2"
    projectFileName="$2"
    optType="project"
    shift 2
    ;;
  --instance)
    [[ -z "$workDIR" ]] && Usage "Specify --workdir argument .... " >&2
    [[ $optType == "project" ]] && Usage "Specify only --project or --instance" >&2
    [[ "$2" == "" || "$2" == null ]] && Usage "Specify path to instances ID file" >&2
    [[ ! -f "$workDIR/$2" ]] && Usage "No such file or directory : $workDIR/$2 ..." >&2
    instancesIdFilePath="$workDIR/$2"
    instanceFileName="$2"
    optType="instance"
    shift 2
    ;;
  --virtenv)
    Activate_env "$2"
    shift 2
    ;;
  --help|-h)
    Usage "" >&2
    exit 2
    ;;
  --)
    shift
    break
    ;;
  *)
    echo "unrecognized arguments: $1"
    Usage "" >&2
    exit 2
  esac
done

#openstack authentication
Openstack_authentication "$AUTH_URL_ARG" "$USERNAME_ARG" "$PASSWORD_ARG" "$PROJECT_ID_ARG" "$DOMAIN_ARG" "$REGION_ARG"
#Install required packages
Required_Packages
#Action base on project or instance
case "$optType" in
project)
  #Processing Get backup pre projects
  echo "<----------------------- event logs for $(date) ------------------------->" >> "$baseDIR"/instance_backup_events.log
  plan="project"
  while IFS="" read -r project || [ "$project" ]; do #read project line by line
    projectName=$(openstack --os-project-id "$OS_PROJECT_ID" project show "$project" | grep name | awk -F "|" '{print $3}' | sed 's/ //g') #get project name
    projectID=$project #get project id
    [[ $deleteFlag == "true" ]] && Delete_Backup "$plan" "$baseDIR" "$workDIR" "$projectID" "$retention" ; deleteFlag=false
    echo "Get Volumes ID for project $projectName .... "
    openstack --os-project-id "$projectID" volume list --project "$projectID" -c ID -f value | sed '/^$/d' > "$workDIR"/VolumesID_"$projectFileName" #get volumes ID list for project
    #processing and get backup
    while IFS= read -r volumeID || [ "$volumeID" ] ; do
      echo "volume : $volumeID check instances attachments"
      instanceAttachedID=$(openstack --os-project-id "$projectID" volume show "$volumeID" -f json | jq '.attachments[0]''.server_id' | sed 's/\"//g')
      echo "list of attachments is $instanceAttachedID"
      backupDate=$(date +"(%H:%M-%Y/%m/%d)")
      if [ -z "$instanceAttachedID" ] || [ "$instanceAttachedID" = null ] ; then #if volume do not attached to any instance
        volumeName=$(openstack --os-project-id "$projectID" volume show "$volumeID" -f json | jq '.name' | sed 's/"//g')
        Get_backup "project_unmounted_volume" "$projectID" "$projectName" "$volumeID" "$volumeName" "$backupDate" "$baseDIR"
      else # if volume attached to an instance
        deviceMountPoint=$(openstack --os-project-id "$OS_PROJECT_ID" volume show "$volumeID" -f json | jq '.attachments[0]''.device' | awk -F "/" '{print $3}' | sed 's/\"//')
        instanceName=$(openstack --os-project-id "$OS_PROJECT_ID" server show "$instanceAttachedID" -f json | jq '.name' | sed 's/\"//g')
        Get_backup "project_mounted_volume" "$projectID" "$projectName" "$instanceName" "$instanceAttachedID" "$volumeID" "$deviceMountPoint" "$backupDate" "$baseDIR"
      fi
      unset instances instanceID instanceName deviceMountPoint
    done < "$workDIR"/VolumesID_"$projectFileName"
    unset prpjectName projectID
  done < "$projectsIdFilePath"
  rm "$workDIR"/VolumesID_"$projectFileName"
  unset plan
  ;;
instance)
  echo "<----------------------- event logs for $(date) ------------------------->" >> "$baseDIR"/instance_backup_events.log
  plan="instance"
  while IFS= read -r instance || [ "$instance" ] ; do
    instanceID="$instance"
    openstack --os-project-id "$OS_PROJECT_ID" server show "$instance" -f json | jq ".volumes_attached" | grep id | sed 's/\\nid//g' | awk -F '[=:]' '{$1=""; print $0}' | awk 1 RS=" |\n" | sed 's/\"//g ; s/ //g' | tr -d \'| sort | uniq | sed 's/^$//g' | sed '1d'> "$workDIR"/volumesID_"$instanceFileName"
    instanceName=$(openstack --os-project-id "$OS_PROJECT_ID" server show "$instance" -f json | jq ".name" | sed 's/\"//g')
    projectID=$(openstack --os-project-id "$OS_PROJECT_ID" server show "$instance" -f json | jq ".project_id" | sed 's/\"//g')
    projectName=$(openstack --os-project-id "$OS_PROJECT_ID" project show "$projectID" -f json | jq '.name' | sed 's/\"//g')
    backupDate=$(date +"(%H:%M-%Y/%m/%d)")
    [[ $deleteFlag == "true" ]] && Delete_Backup "$plan" "$baseDIR" "$workDIR" "$projectID" "$retention" ; deleteFlag=false
    while IFS= read -r volumeID || [ "$volumeID" ] ; do
      deviceMountPoint=$(openstack --os-project-id "$OS_PROJECT_ID" volume show "$volumeID" -f json | jq '.attachments[0]''.device' | awk -F "/" '{print $3}' | sed 's/\"//')
      Get_backup "instance" "$projectID" "$projectName" "$instanceName" "$instanceID" "$volumeID" "$deviceMountPoint" "$backupDate" "$baseDIR"
      unset deviceMountPoint
    done < "$workDIR"/volumesID_"$instanceFileName"
    unset instanceID instanceName projectID projectName BackupDate
  done < "$instancesIdFilePath"
  rm "$workDIR"/volumesID_"$instanceFileName"
  unset plan
  ;;

*) echo "type --instance or --project exactly"
   exit 1
esac
unset optType deleteFlag baseDIR workDIR instanceFileName instancesIdFilePath projectFileName projectsIdFilePath